import{_ as p,r as c,o as u,c as d,a as s,d as n,b as e,w as a,e as i}from"./app-9bd5f875.js";const h={},k={id:"wireguard-secure-vpn-tunnel",tabindex:"-1"},g=s("a",{class:"header-anchor",href:"#wireguard-secure-vpn-tunnel","aria-hidden":"true"},"#",-1),b=s("p",null,"WireGuard is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable.",-1),m={href:"https://www.wireguard.com/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.wireguard.com/repositories/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.wireguard.com/quickstart/",target:"_blank",rel:"noopener noreferrer"},y=s("p",null,"Setup and configuration have been tested on following OS with version:",-1),_=s("ul",null,[s("li",null,"Ubuntu- 18.04, 20.04 (Focal Fossa), Rocky 8.4 (Green Obsidian)"),s("li",null,"WireGuard- 1.0.2~")],-1),w={href:"https://ko-fi.com/B0B31BJU3",target:"_blank",rel:"noopener noreferrer"},x=s("img",{src:"https://www.ko-fi.com/img/githubbutton_sm.svg",alt:"ko-fi"},null,-1),N=s("h2",{id:"configuration-files",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#configuration-files","aria-hidden":"true"},"#"),n(" Configuration files")],-1),G={href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/wireguard/config/wg0.conf_server",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/wireguard/config/wg0.conf_client",target:"_blank",rel:"noopener noreferrer"},R=i(`<h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><ul><li><code>epel-release</code> (Rocky)</li><li><code>elrepo-release</code> (Rocky)</li><li><code>net-tools</code> (optional)</li></ul><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>In this example we will be configuring WireGuard on our servers to communicate securely over an encrypted virtual private network (VPN). This approach can be useful to secure communication in both cloud environments or any non-trusted network. We will set up one so called master server (<code>192.168.8.1</code>) along with two client servers (<code>192.168.8.2</code>, <code>192.168.8.3</code>). The public subnet (endpoint) is <code>192.168.0.0/24</code>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>WireGuard is now included in the Linux kernel since the 5.6 release.</p></div><h2 id="master-server" tabindex="-1"><a class="header-anchor" href="#master-server" aria-hidden="true">#</a> Master server</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>WireGuard are not available on the default <strong>Rocky 8.4</strong> repositories. To install them EPEL repositories are required.</p></div><div class="language-shell-session" data-ext="shell-session"><pre class="language-shell-session"><code><span class="token command"><span class="token info punctuation"><span class="token user">server@rocky</span><span class="token punctuation">:</span><span class="token path">~</span></span><span class="token shell-symbol important">$</span> <span class="token bash language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> elrepo-release</span></span>
</code></pre></div><p>Next proceed to install WireGuard on <strong>Ubuntu 20.04</strong> (Focal Fossa) or <strong>Rocky 8.4</strong> (Green Obsidian).</p>`,9),I=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt-get"),n(),s("span",{class:"token function"},"install"),n(" wireguard")])]),n(`
`)])])],-1),U=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(" yum "),s("span",{class:"token parameter variable"},"-y"),n(),s("span",{class:"token function"},"install"),n(" kmod-wireguard wireguard-tools")])]),n(`
`)])])],-1),$=s("p",null,"Generate a private and public key as root user for the WireGuard server.",-1),W=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token parameter variable"},"-i")])]),n(`
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token builtin class-name"},"cd"),n(" /etc/wireguard/ "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
wg genkey `),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tee"),n(" private.key "),s("span",{class:"token operator"},"|"),n(" wg pubkey "),s("span",{class:"token operator"},">"),n(" public.key "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"chmod"),n(" 077 private.key public.key")])]),n(`
`)])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br")])],-1),O=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token parameter variable"},"-i")])]),n(`
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token builtin class-name"},"cd"),n(" /etc/wireguard/ "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
wg genkey `),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tee"),n(" private.key "),s("span",{class:"token operator"},"|"),n(" wg pubkey "),s("span",{class:"token operator"},">"),n(" public.key "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"chmod"),n(" 077 private.key public.key")])]),n(`
`)])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br")])],-1),q=s("p",null,"Copy the private key and create the WireGuard configuration file (wg0.conf) as root.",-1),K=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"cat"),n(" private.key")])]),n(`
`),s("span",{class:"token output"},`INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ=
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"nano"),n(" wg0.conf")])]),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("div",{class:"highlight-line"}," "),s("br")])],-1),T=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"cat"),n(" private.key")])]),n(`
`),s("span",{class:"token output"},`INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ=
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"nano"),n(" wg0.conf")])]),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("div",{class:"highlight-line"}," "),s("br")])],-1),B=i(`<p>In the configuration file proceed and define the subnet, port and private key for the VPN network.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Interface<span class="token punctuation">]</span>
Address <span class="token operator">=</span> <span class="token number">10.0</span>.0.1/24
ListenPort <span class="token operator">=</span> <span class="token number">51820</span>
PrivateKey <span class="token operator">=</span> <span class="token assign-left variable">INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ</span><span class="token operator">=</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Proceed to enable WireGuard on boot and start it.</p>`,3),V=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token builtin class-name"},"exit")])]),n(`
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(" wg-quick@wg0 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(" systemctl start wg-quick@wg0")])]),n(`
`)])])],-1),S=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token builtin class-name"},"exit")])]),n(`
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(" wg-quick@wg0 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(" systemctl start wg-quick@wg0")])]),n(`
`)])])],-1),J=s("p",null,[n("Next check if the interface is up using "),s("code",null,"ifconfig"),n(" (requires "),s("code",null,"net-tools"),n(") or "),s("code",null,"ip"),n(".")],-1),C=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"ifconfig"),n(),s("span",{class:"token parameter variable"},"-a"),n(" wg0")])]),n(`
`),s("span",{class:"token output"},`wg0: flags=209<UP,POINTOPOINT,RUNNING,NOARP>  mtu 1420
        inet 10.0.0.1  netmask 255.255.255.0  destination 10.0.0.1
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
`)])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")])],-1),L=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"server@rocky"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"ifconfig"),n(),s("span",{class:"token parameter variable"},"-a"),n(" wg0")])]),n(`
`),s("span",{class:"token output"},`wg0: flags=209<UP,POINTOPOINT,RUNNING,NOARP>  mtu 1420
        inet 10.0.0.1  netmask 255.255.255.0  destination 10.0.0.1
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
`)])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")])],-1),F=s("h2",{id:"client-servers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#client-servers","aria-hidden":"true"},"#"),n(" Client servers")],-1),M=s("p",null,"Install WireGuard at the first client machine.",-1),A=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"client@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt-get"),n(),s("span",{class:"token function"},"install"),n(" wireguard")])]),n(`
`)])])],-1),D=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token output"},`server@rocky:~$
`)])])],-1),Q=s("p",null,"As root generate the private and public key.",-1),X=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"client@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token parameter variable"},"-i")])]),n(`
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token builtin class-name"},"cd"),n(" /etc/wireguard/ "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
wg genkey `),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tee"),n(" private.key "),s("span",{class:"token operator"},"|"),n(" wg pubkey "),s("span",{class:"token operator"},">"),n(" public.key "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"chmod"),n(" 077 private.key public.key")])]),n(`
`)])])],-1),j=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token output"},`server@rocky:~$
`)])])],-1),z=s("p",null,"Copy the private key and create the WireGuard configuration file.",-1),E=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"cat"),n(" private.key")])]),n(`
`),s("span",{class:"token output"},`INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ=
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"nano"),n(" wg0.conf")])]),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("div",{class:"highlight-line"}," "),s("br")])],-1),H=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token output"},`server@rocky:~$
`)])])],-1),Z=i(`<p>In the configuration file proceed and define the IP address and private key for the VPN client. In the peer section define the public key (<code>cat public.key</code>) from the master server along with the subnet and public endpoint.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Interface<span class="token punctuation">]</span>
Address <span class="token operator">=</span> <span class="token number">192.168</span>.8.2/24
PrivateKey <span class="token operator">=</span> <span class="token assign-left variable">INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ</span><span class="token operator">=</span>

<span class="token punctuation">[</span>Peer<span class="token punctuation">]</span>
PublicKey <span class="token operator">=</span> <span class="token assign-left variable">R688QTGKkMCGpJpwrHJ9yXBY5CxriqLGQLy6Agse2DE</span><span class="token operator">=</span>
AllowedIPs <span class="token operator">=</span> <span class="token number">192.168</span>.8.0/24
Endpoint <span class="token operator">=</span> <span class="token number">192.168</span>.0.1:51820
PersistentKeepalive <span class="token operator">=</span> <span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next copy the public key from the client machine and update the master server&#39;s WireGuard configuration (<code>wg0.conf</code>).</p>`,3),Y=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"cat"),n(" public.key")])]),n(`
`),s("span",{class:"token output"},`J3+KjJXJDKN9UVLpdlo3UBrBVU1JOdahGQYqpRxbe00=
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("div",{class:"highlight-line"}," ")])],-1),ss=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token output"},`server@rocky:~$
`)])])],-1),ns=i(`<p>In the master server&#39;s configuration file at the public key of the client machine under its peer section.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Interface<span class="token punctuation">]</span>
Address <span class="token operator">=</span> <span class="token number">192.168</span>.8.1/24
ListenPort <span class="token operator">=</span> <span class="token number">51820</span>
PrivateKey <span class="token operator">=</span> <span class="token assign-left variable">INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ</span><span class="token operator">=</span>

<span class="token punctuation">[</span>Peer<span class="token punctuation">]</span>
PublicKey <span class="token operator">=</span> J3+KjJXJDKN9UVLpdlo3UBrBVU1JOdahGQYqpRxbe00<span class="token operator">=</span>
AllowedIPs <span class="token operator">=</span> <span class="token number">192.168</span>.8.2/32
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Proceed to enable WireGuard on boot and start it.</p>`,3),es=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"root@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token builtin class-name"},"exit")])]),n(`
`),s("span",{class:"token command"},[s("span",{class:"token info punctuation"},[s("span",{class:"token user"},"client@ubuntu"),s("span",{class:"token punctuation"},":"),s("span",{class:"token path"},"~")]),s("span",{class:"token shell-symbol important"},"$"),n(),s("span",{class:"token bash language-bash"},[s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(" wg-quick@wg0 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(" systemctl start wg-quick@wg0")])]),n(`
`)])])],-1),as=s("div",{class:"language-shell-session","data-ext":"shell-session"},[s("pre",{class:"language-shell-session"},[s("code",null,[s("span",{class:"token output"},`server@rocky:~$
`)])])],-1),ts=i(`<p>Before we add the second client machine you can quickly test if the set up is working by sending a ping (ICMP) request between the client and server and vice versa. First make sure that you did open the required ports in your firewall (see <a href="#firewall-settings">Firewall settings</a>).</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>client@ubuntu:~$ ping 192.168.8.1
PING 192.168.8.1 (192.168.8.1) 56(84) bytes of data.
64 bytes from 192.168.8.1: icmp_seq=1 ttl=64 time=0.646 ms
server@ubuntu:~$ ping 192.168.8.2
PING 192.168.8.2 (192.168.8.2) 56(84) bytes of data.
64 bytes from 192.168.8.2: icmp_seq=1 ttl=64 time=0.424 ms
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you&#39;ve confirmed that the connection between the master server and client works, proceed to set up your second client using the same approach as for the first client. Make sure to add the new client (peer) under the master server&#39;s WireGuard configuration.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Interface<span class="token punctuation">]</span>
Address <span class="token operator">=</span> <span class="token number">192.168</span>.8.1/24
ListenPort <span class="token operator">=</span> <span class="token number">51820</span>
PrivateKey <span class="token operator">=</span> <span class="token assign-left variable">INroRZ79Rx7mWg8f7MrocxyK2SzTN4GHGw5jOvtpDOQ</span><span class="token operator">=</span>

<span class="token punctuation">[</span>Peer<span class="token punctuation">]</span>
PublicKey <span class="token operator">=</span> J3+KjJXJDKN9UVLpdlo3UBrBVU1JOdahGQYqpRxbe00<span class="token operator">=</span>
AllowedIPs <span class="token operator">=</span> <span class="token number">192.168</span>.8.2/32

<span class="token punctuation">[</span>Peer<span class="token punctuation">]</span>
PublicKey <span class="token operator">=</span> l2+KjJXJDKN8UbLadlz3U4rBxU1JOdahXFfqpRi0QrP<span class="token operator">=</span>
AllowedIPs <span class="token operator">=</span> <span class="token number">192.168</span>.8.3/32
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="firewall-settings" tabindex="-1"><a class="header-anchor" href="#firewall-settings" aria-hidden="true">#</a> Firewall settings</h2>`,5),os={href:"https://help.ubuntu.com/community/UFW",target:"_blank",rel:"noopener noreferrer"},ls=i(`<details class="custom-container details"><summary>UFW Settings</summary><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>server@ubuntu:~$ sudo ufw default deny incoming
server@ubuntu:~$ sudo ufw default allow outgoing
server@ubuntu:~$ sudo ufw allow 22
server@ubuntu:~$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? y
Firewall is active and enabled on system startup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>server@ubuntu:~$ sudo ufw allow proto udp from 192.168.8.0/32 to any port 51820 comment &quot;WireGuard&quot;
client@ubuntu:~§ sudo ufw allow proto udp from 192.168.8.1 to any port 51820 comment &quot;WireGuard server&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting" aria-hidden="true">#</a> Troubleshooting</h2>`,3),is=s("code",null,"#wireguard",-1),cs={href:"https://webchat.freenode.net/#wireguard",target:"_blank",rel:"noopener noreferrer"},rs=s("h2",{id:"recommended-services",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#recommended-services","aria-hidden":"true"},"#"),n(" Recommended services")],-1),ps={id:"mullvad-vpn",tabindex:"-1"},us=s("a",{class:"header-anchor",href:"#mullvad-vpn","aria-hidden":"true"},"#",-1),ds=s("p",null,"Mullvad is a VPN service that helps keep your online activity, identity, and location private. They keep no activity logs, do not ask for personal information, and even encourage anonymous payments via cash or one of the cryptocurrencies they accept. Your IP address is replaced by one of theirs, ensuring that your device's activity and location are not linked to you.",-1),hs={href:"https://mullvad.net/en/",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://mullvad.net/en/",target:"_blank",rel:"noopener noreferrer"},gs=["src"];function bs(ms,vs){const r=c("Badge"),o=c("ExternalLinkIcon"),t=c("CodeGroupItem"),l=c("CodeGroup");return u(),d("div",null,[s("h1",k,[g,n(" WireGuard Secure VPN Tunnel "),e(r,{text:"Rev 2",type:"tip"})]),b,s("p",null,[s("a",m,[n("WireGuard website"),e(o)]),n(),s("a",v,[n("Git"),e(o)]),n(),s("a",f,[n("Quick start guide"),e(o)])]),y,_,s("p",null,[s("a",w,[x,e(o)])]),N,s("ul",null,[s("li",null,[s("a",G,[n("wg0.conf"),e(o)]),n(" (server)")]),s("li",null,[s("a",P,[n("wg0.conf"),e(o)]),n(" (client)")])]),R,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[I]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[U]),_:1})]),_:1}),$,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[W]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[O]),_:1})]),_:1}),q,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[K]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[T]),_:1})]),_:1}),B,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[V]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[S]),_:1})]),_:1}),J,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[C]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[L]),_:1})]),_:1}),F,M,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[A]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[D]),_:1})]),_:1}),Q,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[X]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[j]),_:1})]),_:1}),z,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[E]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[H]),_:1})]),_:1}),Z,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Y]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ss]),_:1})]),_:1}),ns,e(l,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[es]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[as]),_:1})]),_:1}),ts,s("p",null,[n("The firewall being used is UFW (Uncomplicated Firewall). It is set by default to deny incoming traffic, allow outgoing traffic and allow port 22 (OpenSSH). Read more about UFW "),s("a",os,[n("here"),e(o)]),n(".")]),ls,s("p",null,[n("In case you'll need help troubleshooting your WireGuard set up you can always ask help at the "),is,n(" IRC channel on "),s("a",cs,[n("Freenode"),e(o)]),n(".")]),rs,s("h3",ps,[us,n(" Mullvad VPN "),e(r,{text:"non-affiliate",type:"tip"})]),ds,s("p",null,[s("a",hs,[n("Mullvad VPN"),e(o)])]),s("p",null,[n("What we like about "),s("a",ks,[n("Mullvad VPN"),e(o)]),n(" is how easy it is to select which VPN protocol you prefer to use e.g. WireGuard and set custom DNS servers along with a very resonable price of only 5 EUR per month. It's also a great product and probably cheaper and faster than an internet provider where you'll still have to pay for your data.")]),s("img",{class:"zoom-custom-imgs",src:"/img/wireguard/mullvad.png",alt:"mullvad"},null,8,gs)])}const ys=p(h,[["render",bs],["__file","index.html.vue"]]);export{ys as default};
